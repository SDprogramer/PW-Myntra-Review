-> jupyter notebook lecture :-

import requests # Request the webpages
from bs4 import BeautifulSoup as bs # To pass html content
from selenium import webdriver # Automate browser
# Web driver -> Handle chrome web browser
from selenium.webdriver.common.by import By # By class is imported

get method => loads a webpage into current browser session
rawQuery => what is the string we are searching for
html.parser =>  
Initialise driver, ask driver open chrome, go to particular url, ask driver extract entire page source

ctrl + shift + c => inspect page
all products are in unordered list class result base
fetch text of only first product
find all => will find ul class named result base in the entire webpage
pclass[0] => fetch entire webpage and only select 1st product

for i in pclass:
    href = i.find_all('a', href = True) => find all the anchor tags
    t = (href[0]['href']) => only 1st product
"https://www.myntra.com/" + t => storing the url link
a => anchor tag => contains the hyperlink reference url of the product

getting to product link and opening the one single product

extracting the title by inspect webpage

prodRes_html.findAll("div", {"class" : "index-overallRating"}) => 
find all div with class name index-overallRating 

we only need 4.1 data and discard all others so we use for loop
i.find the div as a text and then print

find all span with class name pdp-price 

we only need 1246 data and discard all others so we use for loop
i the span as a text and then print


without only single review we will go to the all detailed reviews page
find specific anchor tag with class name detailed-reviews-allReviews

t2 = Reviews['href'] => copying the href text from Reviews to t2
Review_link = 'https://www.myntra.com' + t2 => and creating a customised url of the review page

get to the review_link and open the driver page source

driver.quit() => close the application

review = review_html.find_all("div", {"class" : "detailed-reviews-userReviewsContainer"})
=> We are taking all the reviews calss in a single variable

for i in review:
    user_rating = i.findAll("div", {"class" : "user-review-main user-review-showRating"})
    user_comment = i.findAll("div",{"class" : "user-review-reviewTextWrapper"})
    user_name = i.findAll("div",{"class" : "user-review-left"})
=> Then hovering one by one which one we need to access

for i in range(len(user_rating)):
    rating = user_rating[i].find('span', class_ = 'user-review-starRating').get_text().strip()
=> Rating is in span class
=> Rating is available as text
=> Strip = Used to remove extra spaces
    comment = user_comment[i].text
    name = user_name[i].find('span').text => Name is in 1st element of span
    date = user_name[i].find_all('span')[1].text => Date is in 2nd element of span
    print(f"Date : {date}, Rating : {rating}, Name : {name}, comment : {comment}")


Set Folder Structure:-

__init__.py => Making the folder as a package
scrapper => Contains all the logic of the scrapping data project
data_report => Can be used for generating data report
cloud_io => Cloud related input output, putting data in mongo db
constants => Contains all constants used across the file
utils => Helper functions used 
exceptions => Contains custom exception


Exception handling lecture:-
try and error exception
use ai to understand


Utils and constants:-
constants => mongo db access modifier
utils
from src.cloud_io import MongoIO => We r importing mongo db
from src.constants import MONGO_DATABASE_NAME => We r importing mongo db database name
from src.exception import CustomException => We r importing custom exception
import os, sys

def fetch_product_names_from_cloud(): # From mongo db
    try:
        mongo = MongoIO()
        collection_names = mongo.mongo_ins.	_mongo_operation__connect_database.list_collection_names() => Getting collection names from database
        return [collection_name.replace('_', ' ') => Replacing underscore with spaces for better usecase
                for collection_name in collection_names]

    except Exception as e:
        raise CustomException(e, sys)


MongoDB Connection 2:-
mongo operation => helps us to connect from mongo db
mongoIO Class => 2 methods = 1 to store and 1 to get reviews
mongo_ins = None => Class level variable, To establish only once during the running of application
if mongo db url is none raise exception
product name is the collection name





